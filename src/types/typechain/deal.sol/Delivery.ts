/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DeliveryInterface extends utils.Interface {
  functions: {
    "abort(uint256)": FunctionFragment;
    "addDeal(string,address)": FunctionFragment;
    "changeComissionRate(uint256)": FunctionFragment;
    "confirmDeal(uint256)": FunctionFragment;
    "dealCount()": FunctionFragment;
    "deals(uint256)": FunctionFragment;
    "deliveryCalledOff(uint256)": FunctionFragment;
    "deliverySuccessful(uint256,string)": FunctionFragment;
    "giveBuyerMoney(uint256)": FunctionFragment;
    "giveSellerMoney(uint256)": FunctionFragment;
    "productIsntWhatWasPromised(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "abort"
      | "addDeal"
      | "changeComissionRate"
      | "confirmDeal"
      | "dealCount"
      | "deals"
      | "deliveryCalledOff"
      | "deliverySuccessful"
      | "giveBuyerMoney"
      | "giveSellerMoney"
      | "productIsntWhatWasPromised"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "abort",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addDeal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeComissionRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDeal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dealCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveryCalledOff",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deliverySuccessful",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "giveBuyerMoney",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "giveSellerMoney",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "productIsntWhatWasPromised",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "abort", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeComissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDeal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dealCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deliveryCalledOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliverySuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveBuyerMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveSellerMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productIsntWhatWasPromised",
    data: BytesLike
  ): Result;

  events: {
    "ComissionChangedTo(uint256)": EventFragment;
    "DealComplete(address,address,uint256)": EventFragment;
    "DealIsCalledOff(address,address,uint256)": EventFragment;
    "DeliveryAddedEvent(address,address,uint256)": EventFragment;
    "ItemReceived(address,address,uint256)": EventFragment;
    "ProductIsNotWhatWasPromised(address,address,string)": EventFragment;
    "PurchaseConfirmed(address,uint256)": EventFragment;
    "RequestPayFromOwner(address,uint256)": EventFragment;
    "SellerRefunded(address,address,uint256)": EventFragment;
    "reportAborted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ComissionChangedTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealIsCalledOff"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeliveryAddedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemReceived"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProductIsNotWhatWasPromised"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestPayFromOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "reportAborted"): EventFragment;
}

export interface ComissionChangedToEventObject {
  _rate: BigNumber;
}
export type ComissionChangedToEvent = TypedEvent<
  [BigNumber],
  ComissionChangedToEventObject
>;

export type ComissionChangedToEventFilter =
  TypedEventFilter<ComissionChangedToEvent>;

export interface DealCompleteEventObject {
  _buyer: string;
  _seller: string;
  _dealId: BigNumber;
}
export type DealCompleteEvent = TypedEvent<
  [string, string, BigNumber],
  DealCompleteEventObject
>;

export type DealCompleteEventFilter = TypedEventFilter<DealCompleteEvent>;

export interface DealIsCalledOffEventObject {
  _buyer: string;
  _seller: string;
  _dealId: BigNumber;
}
export type DealIsCalledOffEvent = TypedEvent<
  [string, string, BigNumber],
  DealIsCalledOffEventObject
>;

export type DealIsCalledOffEventFilter = TypedEventFilter<DealIsCalledOffEvent>;

export interface DeliveryAddedEventEventObject {
  _buyer: string;
  _seller: string;
  _dealId: BigNumber;
}
export type DeliveryAddedEventEvent = TypedEvent<
  [string, string, BigNumber],
  DeliveryAddedEventEventObject
>;

export type DeliveryAddedEventEventFilter =
  TypedEventFilter<DeliveryAddedEventEvent>;

export interface ItemReceivedEventObject {
  _buyer: string;
  _seller: string;
  _dealId: BigNumber;
}
export type ItemReceivedEvent = TypedEvent<
  [string, string, BigNumber],
  ItemReceivedEventObject
>;

export type ItemReceivedEventFilter = TypedEventFilter<ItemReceivedEvent>;

export interface ProductIsNotWhatWasPromisedEventObject {
  contractOwner: string;
  _seller: string;
  _itemId: string;
}
export type ProductIsNotWhatWasPromisedEvent = TypedEvent<
  [string, string, string],
  ProductIsNotWhatWasPromisedEventObject
>;

export type ProductIsNotWhatWasPromisedEventFilter =
  TypedEventFilter<ProductIsNotWhatWasPromisedEvent>;

export interface PurchaseConfirmedEventObject {
  _seller: string;
  _dealId: BigNumber;
}
export type PurchaseConfirmedEvent = TypedEvent<
  [string, BigNumber],
  PurchaseConfirmedEventObject
>;

export type PurchaseConfirmedEventFilter =
  TypedEventFilter<PurchaseConfirmedEvent>;

export interface RequestPayFromOwnerEventObject {
  contractOwner: string;
  _dealId: BigNumber;
}
export type RequestPayFromOwnerEvent = TypedEvent<
  [string, BigNumber],
  RequestPayFromOwnerEventObject
>;

export type RequestPayFromOwnerEventFilter =
  TypedEventFilter<RequestPayFromOwnerEvent>;

export interface SellerRefundedEventObject {
  _buyer: string;
  _seller: string;
  _dealId: BigNumber;
}
export type SellerRefundedEvent = TypedEvent<
  [string, string, BigNumber],
  SellerRefundedEventObject
>;

export type SellerRefundedEventFilter = TypedEventFilter<SellerRefundedEvent>;

export interface reportAbortedEventObject {
  contractOwner: string;
  _dealId: BigNumber;
}
export type reportAbortedEvent = TypedEvent<
  [string, BigNumber],
  reportAbortedEventObject
>;

export type reportAbortedEventFilter = TypedEventFilter<reportAbortedEvent>;

export interface Delivery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeliveryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    abort(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addDeal(
      _itemId: PromiseOrValue<string>,
      _seller: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeComissionRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmDeal(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, number, string] & {
        id: BigNumber;
        value: BigNumber;
        code: string;
        seller: string;
        buyer: string;
        state: number;
        itemId: string;
      }
    >;

    deliveryCalledOff(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deliverySuccessful(
      _dealId: PromiseOrValue<BigNumberish>,
      _code: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    giveBuyerMoney(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    giveSellerMoney(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    productIsntWhatWasPromised(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  abort(
    _dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addDeal(
    _itemId: PromiseOrValue<string>,
    _seller: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeComissionRate(
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmDeal(
    _dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealCount(overrides?: CallOverrides): Promise<BigNumber>;

  deals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string, number, string] & {
      id: BigNumber;
      value: BigNumber;
      code: string;
      seller: string;
      buyer: string;
      state: number;
      itemId: string;
    }
  >;

  deliveryCalledOff(
    _dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deliverySuccessful(
    _dealId: PromiseOrValue<BigNumberish>,
    _code: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  giveBuyerMoney(
    _dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  giveSellerMoney(
    _dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  productIsntWhatWasPromised(
    _dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    abort(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addDeal(
      _itemId: PromiseOrValue<string>,
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeComissionRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    confirmDeal(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    dealCount(overrides?: CallOverrides): Promise<BigNumber>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, number, string] & {
        id: BigNumber;
        value: BigNumber;
        code: string;
        seller: string;
        buyer: string;
        state: number;
        itemId: string;
      }
    >;

    deliveryCalledOff(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deliverySuccessful(
      _dealId: PromiseOrValue<BigNumberish>,
      _code: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    giveBuyerMoney(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    giveSellerMoney(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    productIsntWhatWasPromised(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ComissionChangedTo(uint256)"(
      _rate?: PromiseOrValue<BigNumberish> | null
    ): ComissionChangedToEventFilter;
    ComissionChangedTo(
      _rate?: PromiseOrValue<BigNumberish> | null
    ): ComissionChangedToEventFilter;

    "DealComplete(address,address,uint256)"(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): DealCompleteEventFilter;
    DealComplete(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): DealCompleteEventFilter;

    "DealIsCalledOff(address,address,uint256)"(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): DealIsCalledOffEventFilter;
    DealIsCalledOff(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): DealIsCalledOffEventFilter;

    "DeliveryAddedEvent(address,address,uint256)"(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): DeliveryAddedEventEventFilter;
    DeliveryAddedEvent(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): DeliveryAddedEventEventFilter;

    "ItemReceived(address,address,uint256)"(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): ItemReceivedEventFilter;
    ItemReceived(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): ItemReceivedEventFilter;

    "ProductIsNotWhatWasPromised(address,address,string)"(
      contractOwner?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _itemId?: PromiseOrValue<string> | null
    ): ProductIsNotWhatWasPromisedEventFilter;
    ProductIsNotWhatWasPromised(
      contractOwner?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _itemId?: PromiseOrValue<string> | null
    ): ProductIsNotWhatWasPromisedEventFilter;

    "PurchaseConfirmed(address,uint256)"(
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseConfirmedEventFilter;
    PurchaseConfirmed(
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseConfirmedEventFilter;

    "RequestPayFromOwner(address,uint256)"(
      contractOwner?: PromiseOrValue<string> | null,
      _dealId?: null
    ): RequestPayFromOwnerEventFilter;
    RequestPayFromOwner(
      contractOwner?: PromiseOrValue<string> | null,
      _dealId?: null
    ): RequestPayFromOwnerEventFilter;

    "SellerRefunded(address,address,uint256)"(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): SellerRefundedEventFilter;
    SellerRefunded(
      _buyer?: PromiseOrValue<string> | null,
      _seller?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): SellerRefundedEventFilter;

    "reportAborted(address,uint256)"(
      contractOwner?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): reportAbortedEventFilter;
    reportAborted(
      contractOwner?: PromiseOrValue<string> | null,
      _dealId?: PromiseOrValue<BigNumberish> | null
    ): reportAbortedEventFilter;
  };

  estimateGas: {
    abort(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addDeal(
      _itemId: PromiseOrValue<string>,
      _seller: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeComissionRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmDeal(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealCount(overrides?: CallOverrides): Promise<BigNumber>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deliveryCalledOff(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deliverySuccessful(
      _dealId: PromiseOrValue<BigNumberish>,
      _code: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    giveBuyerMoney(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    giveSellerMoney(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    productIsntWhatWasPromised(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abort(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addDeal(
      _itemId: PromiseOrValue<string>,
      _seller: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeComissionRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmDeal(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deliveryCalledOff(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deliverySuccessful(
      _dealId: PromiseOrValue<BigNumberish>,
      _code: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    giveBuyerMoney(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    giveSellerMoney(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    productIsntWhatWasPromised(
      _dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
